#!/bin/bash

set -e

cd "${1}"

exec 3>&1
exec 1>&2
set +x

# for jq
PATH=/usr/local/bin:$PATH

payload=$(mktemp /tmp/resource-out.XXXXXX)

cat > "${payload}" <&0

sonar_host_url=$(jq -r '.source.host_url // ""' < "${payload}")
if [ -z "${sonar_host_url}" ]; then
  echo "host_url param has not been specified."
  exit 1
fi

sonar_host_url=${sonar_host_url%/}

sonar_login=$(jq -r '.source.login // ""' < "${payload}")
if [ -z "${sonar_login}" ]; then
  echo "sonar_login param has not been specified."
  exit 1
fi

sonar_project_key=$(jq -r '.params.project_key // ""' < "${payload}")
if [ -z "${sonar_project_key}" ]; then
  echo "project_key param has not been specified."
  exit 1
fi

sonar_project_name=$(jq -r '.params.project_name // ""' < "${payload}")
if [ -z "${sonar_project_name}" ]; then
  echo "project_name param has not been specified."
  exit 1
fi

version_val=""
version=$(jq -r '.params.version // ""' < "${payload}")
if [ -n "${version}" ]; then
  version_val=$(cat $version)
fi

source=$(jq -r '.params.source // ""' < "${payload}")
if [ -z "${source}" ]; then
  echo "source param has not been specified."
  exit 1
fi

cd "$source"

projects=$(jq -r '.params.projects // ""' < "${payload}")
if [ -z "${projects}" ]; then
  projects=$(for f in **/*.csproj; do dirname $f; done)
fi

options=""
additional_properties=$(jq -r 'if .params.additional_properties then .params.additional_properties[] else empty end' < "${payload}")
for ep in $additional_properties; do exep=$(eval echo $ep) options+="/d:$exep "; done

additional_properties_file=$(jq -r '.params.additional_properties_file // ""' < "${payload}")
if [[ ! -z "${additional_properties_file}" ]]; then
	props=$(read_properties "${additional_properties_file}")
	while read -r p; do
		options+=" -D${p}"
	done <<< "${props}"
fi

mono /opt/sonar-scanner-msbuild/SonarQube.Scanner.MSBuild.exe begin /d:sonar.host.url=$sonar_host_url /d:sonar.login=$sonar_login /k:$sonar_project_key /n:"$sonar_project_name" /v:$version_val $options
for p in $projects; do dotnet restore $p; done
for p in $projects; do dotnet build $p; done
mono /opt/sonar-scanner-msbuild/SonarQube.Scanner.MSBuild.exe end /d:sonar.login=$sonar_login

scanner_report_file=.sonarqube/out/.sonar/report-task.txt

echo "Reading SonarQube scanner report (${scanner_report_file})..."
if [ -f "${scanner_report_file}" ]; then
  while read -r line; do declare $line; done < ${scanner_report_file}
else
  echo "error: SonarQube report could not be located."
  exit 1
fi

jq -n "{
  version: {ce_task_id: \"${ceTaskId:?}\"},
  metadata: [
    { name: \"project_key\", value: \"${projectKey:?}\" },
    { name: \"server_url\", value: \"${serverUrl:?}\" },
    { name: \"server_version\", value: \"${serverVersion:?}\" },
    { name: \"dashboard_url\", value: \"${dashboardUrl:?}\" },
    { name: \"ce_task_url\", value: \"${ceTaskUrl:?}\" }
  ]
}" >&3
